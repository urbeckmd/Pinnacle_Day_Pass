Schema {
  obj: {
    residentFirstName: {
      type: [Function: String],
      required: [ true, "Please provide the resident's first name..." ],
      unique: false
    },
    residentLastName: {
      type: [Function: String],
      required: [ true, "Please provide the resident's last name..." ],
      unique: false
    },
    residentEmail: {
      type: [Function: String],
      required: [ true, "Please provide the resident's email..." ],
      unique: [ true, 'Email exists...' ]
    },
    residentPassword: {
      type: [Function: String],
      required: [ true, 'Please provide a password...' ],
      unique: false
    },
    invitedGuests: {
      invitedGuests: [
        Schema {
          obj: {
            invitedGuestDate: {
              type: [Function: Date],
              required: [ true, 'Please give date of visit...' ],
              unique: false
            },
            invitedGuestForDate: {
              invitedGuestForDate: [
                Schema {
                  obj: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    }
                  },
                  paths: {
                    invitedGuestId: ObjectId {
                      path: 'invitedGuestId',
                      instance: 'ObjectId',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide and ID...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestId' ],
                      options: SchemaObjectIdOptions {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestName: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestName',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's name...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestName' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestNumber: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestNumber',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's phone number...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestNumber' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassScanned: SchemaBoolean {
                      path: 'invitedGuestPassScanned',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been scanned...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassScanned' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassSent: SchemaBoolean {
                      path: 'invitedGuestPassSent',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been sent...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassSent' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    _id: ObjectId {
                      path: '_id',
                      instance: 'ObjectId',
                      validators: [],
                      getters: [],
                      setters: [ [Function: resetId] ],
                      _presplitPath: [ '_id' ],
                      options: SchemaObjectIdOptions {
                        auto: true,
                        type: 'ObjectId'
                      },
                      _index: null,
                      defaultValue: [Function: defaultId] {
                        '$runBeforeSetters': true
                      },
                      [Symbol(mongoose#schemaType)]: true
                    }
                  },
                  aliases: {},
                  subpaths: {},
                  virtuals: {},
                  singleNestedPaths: {},
                  nested: {},
                  inherits: {},
                  callQueue: [],
                  _indexes: [],
                  methods: {},
                  methodOptions: {},
                  statics: {},
                  tree: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    },
                    _id: { auto: true, type: 'ObjectId' }
                  },
                  query: {},
                  childSchemas: [],
                  plugins: [],
                  '$id': 1,
                  mapPaths: [],
                  s: {
                    hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                  },
                  _userProvidedOptions: {},
                  options: {
                    typeKey: 'type',
                    id: true,
                    _id: true,
                    validateModifiedOnly: false,
                    validateBeforeSave: true,
                    read: null,
                    shardKey: null,
                    discriminatorKey: '__t',
                    autoIndex: null,
                    minimize: true,
                    optimisticConcurrency: false,
                    versionKey: '__v',
                    capped: false,
                    bufferCommands: true,
                    strictQuery: false,
                    strict: true
                  }
                }
              ],
              type: [Function: Array],
              required: [ true, 'Please give list of invited guests...' ],
              unique: false
            }
          },
          paths: {
            invitedGuestDate: SchemaDate {
              path: 'invitedGuestDate',
              instance: 'Date',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: 'Please give date of visit...',
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'invitedGuestDate' ],
              options: SchemaDateOptions {
                type: [Function: Date],
                required: [ true, 'Please give date of visit...' ],
                unique: false
              },
              _index: null,
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            invitedGuestForDate: SchemaArray {
              schemaOptions: {
                typeKey: 'type',
                id: true,
                _id: true,
                validateModifiedOnly: false,
                validateBeforeSave: true,
                read: null,
                shardKey: null,
                discriminatorKey: '__t',
                autoIndex: null,
                minimize: true,
                optimisticConcurrency: false,
                versionKey: '__v',
                capped: false,
                bufferCommands: true,
                strictQuery: false,
                strict: true
              },
              casterConstructor: [Function: Mixed] {
                schemaName: 'Mixed',
                defaultOptions: {},
                get: [Function (anonymous)],
                set: [Function: set],
                setters: []
              },
              caster: Mixed {
                path: 'invitedGuestForDate',
                instance: 'Mixed',
                validators: [],
                getters: [],
                setters: [],
                _presplitPath: [ 'invitedGuestForDate' ],
                options: SchemaTypeOptions {},
                _index: null,
                _arrayPath: 'invitedGuestForDate.$',
                _arrayParentPath: 'invitedGuestForDate',
                [Symbol(mongoose#schemaType)]: true,
                [Symbol(mongoose:schema_mixed)]: true
              },
              '$embeddedSchemaType': Mixed {
                path: 'invitedGuestForDate',
                instance: 'Mixed',
                validators: [],
                getters: [],
                setters: [],
                _presplitPath: [ 'invitedGuestForDate' ],
                options: SchemaTypeOptions {},
                _index: null,
                _arrayPath: 'invitedGuestForDate.$',
                _arrayParentPath: 'invitedGuestForDate',
                [Symbol(mongoose#schemaType)]: true,
                [Symbol(mongoose:schema_mixed)]: true
              },
              '$isMongooseArray': true,
              path: 'invitedGuestForDate',
              instance: 'Array',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: 'Please give list of invited guests...',
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'invitedGuestForDate' ],
              options: SchemaArrayOptions {
                invitedGuestForDate: [
                  Schema {
                    obj: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      }
                    },
                    paths: {
                      invitedGuestId: ObjectId {
                        path: 'invitedGuestId',
                        instance: 'ObjectId',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide and ID...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestId' ],
                        options: SchemaObjectIdOptions {
                          type: [Function: ObjectId] {
                            schemaName: 'ObjectId',
                            defaultOptions: {},
                            get: [Function (anonymous)],
                            set: [Function: set],
                            setters: [],
                            _checkRequired: [Function (anonymous)],
                            _cast: [Function: castObjectId],
                            cast: [Function: cast],
                            _defaultCaster: [Function (anonymous)],
                            checkRequired: [Function (anonymous)]
                          },
                          required: [ true, 'Please provide and ID...' ],
                          unique: [ true, 'Please provide a unique ID...' ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestName: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestName',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's name...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestName' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's name..."
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestNumber: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestNumber',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's phone number...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestNumber' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's phone number..."
                          ],
                          unique: [
                            true,
                            'Phone number has already been invited...'
                          ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassScanned: SchemaBoolean {
                        path: 'invitedGuestPassScanned',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been scanned...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassScanned' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been scanned...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassSent: SchemaBoolean {
                        path: 'invitedGuestPassSent',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been sent...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassSent' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been sent...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      _id: ObjectId {
                        path: '_id',
                        instance: 'ObjectId',
                        validators: [],
                        getters: [],
                        setters: [ [Function: resetId] ],
                        _presplitPath: [ '_id' ],
                        options: SchemaObjectIdOptions {
                          auto: true,
                          type: 'ObjectId'
                        },
                        _index: null,
                        defaultValue: [Function: defaultId] {
                          '$runBeforeSetters': true
                        },
                        [Symbol(mongoose#schemaType)]: true
                      }
                    },
                    aliases: {},
                    subpaths: {},
                    virtuals: {},
                    singleNestedPaths: {},
                    nested: {},
                    inherits: {},
                    callQueue: [],
                    _indexes: [],
                    methods: {},
                    methodOptions: {},
                    statics: {},
                    tree: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _id: { auto: true, type: 'ObjectId' }
                    },
                    query: {},
                    childSchemas: [],
                    plugins: [],
                    '$id': 1,
                    mapPaths: [],
                    s: {
                      hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                    },
                    _userProvidedOptions: {},
                    options: {
                      typeKey: 'type',
                      id: true,
                      _id: true,
                      validateModifiedOnly: false,
                      validateBeforeSave: true,
                      read: null,
                      shardKey: null,
                      discriminatorKey: '__t',
                      autoIndex: null,
                      minimize: true,
                      optimisticConcurrency: false,
                      versionKey: '__v',
                      capped: false,
                      bufferCommands: true,
                      strictQuery: false,
                      strict: true
                    }
                  }
                ],
                type: [Function: Array],
                required: [ true, 'Please give list of invited guests...' ],
                unique: false
              },
              _index: null,
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              defaultValue: [Function: defaultFn] { '$runBeforeSetters': true },
              [Symbol(mongoose#schemaType)]: true
            },
            _id: ObjectId {
              path: '_id',
              instance: 'ObjectId',
              validators: [],
              getters: [],
              setters: [ [Function: resetId] ],
              _presplitPath: [ '_id' ],
              options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
              _index: null,
              defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
              [Symbol(mongoose#schemaType)]: true
            }
          },
          aliases: {},
          subpaths: {
            'invitedGuestForDate.$': Mixed {
              path: 'invitedGuestForDate.$',
              instance: 'Mixed',
              validators: [],
              getters: [],
              setters: [],
              _presplitPath: [ 'invitedGuestForDate' ],
              options: SchemaTypeOptions {},
              _index: null,
              [Symbol(mongoose#schemaType)]: true,
              [Symbol(mongoose:schema_mixed)]: true
            }
          },
          virtuals: {},
          singleNestedPaths: {},
          nested: {},
          inherits: {},
          callQueue: [],
          _indexes: [],
          methods: {},
          methodOptions: {},
          statics: {},
          tree: {
            invitedGuestDate: {
              type: [Function: Date],
              required: [ true, 'Please give date of visit...' ],
              unique: false
            },
            invitedGuestForDate: {
              invitedGuestForDate: [
                Schema {
                  obj: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    }
                  },
                  paths: {
                    invitedGuestId: ObjectId {
                      path: 'invitedGuestId',
                      instance: 'ObjectId',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide and ID...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestId' ],
                      options: SchemaObjectIdOptions {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestName: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestName',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's name...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestName' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestNumber: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestNumber',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's phone number...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestNumber' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassScanned: SchemaBoolean {
                      path: 'invitedGuestPassScanned',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been scanned...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassScanned' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassSent: SchemaBoolean {
                      path: 'invitedGuestPassSent',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been sent...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassSent' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    _id: ObjectId {
                      path: '_id',
                      instance: 'ObjectId',
                      validators: [],
                      getters: [],
                      setters: [ [Function: resetId] ],
                      _presplitPath: [ '_id' ],
                      options: SchemaObjectIdOptions {
                        auto: true,
                        type: 'ObjectId'
                      },
                      _index: null,
                      defaultValue: [Function: defaultId] {
                        '$runBeforeSetters': true
                      },
                      [Symbol(mongoose#schemaType)]: true
                    }
                  },
                  aliases: {},
                  subpaths: {},
                  virtuals: {},
                  singleNestedPaths: {},
                  nested: {},
                  inherits: {},
                  callQueue: [],
                  _indexes: [],
                  methods: {},
                  methodOptions: {},
                  statics: {},
                  tree: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    },
                    _id: { auto: true, type: 'ObjectId' }
                  },
                  query: {},
                  childSchemas: [],
                  plugins: [],
                  '$id': 1,
                  mapPaths: [],
                  s: {
                    hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                  },
                  _userProvidedOptions: {},
                  options: {
                    typeKey: 'type',
                    id: true,
                    _id: true,
                    validateModifiedOnly: false,
                    validateBeforeSave: true,
                    read: null,
                    shardKey: null,
                    discriminatorKey: '__t',
                    autoIndex: null,
                    minimize: true,
                    optimisticConcurrency: false,
                    versionKey: '__v',
                    capped: false,
                    bufferCommands: true,
                    strictQuery: false,
                    strict: true
                  }
                }
              ],
              type: [Function: Array],
              required: [ true, 'Please give list of invited guests...' ],
              unique: false
            },
            _id: { auto: true, type: 'ObjectId' }
          },
          query: {},
          childSchemas: [],
          plugins: [],
          '$id': 2,
          mapPaths: [],
          s: { hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} } },
          _userProvidedOptions: {},
          options: {
            typeKey: 'type',
            id: true,
            _id: true,
            validateModifiedOnly: false,
            validateBeforeSave: true,
            read: null,
            shardKey: null,
            discriminatorKey: '__t',
            autoIndex: null,
            minimize: true,
            optimisticConcurrency: false,
            versionKey: '__v',
            capped: false,
            bufferCommands: true,
            strictQuery: false,
            strict: true
          }
        }
      ],
      type: [Function: Array],
      required: false,
      unique: false
    },
    savedGuests: {
      savedGuests: [
        Schema {
          obj: {
            savedGuestId: {
              type: [Function: ObjectId] {
                schemaName: 'ObjectId',
                defaultOptions: {},
                get: [Function (anonymous)],
                set: [Function: set],
                setters: [],
                _checkRequired: [Function (anonymous)],
                _cast: [Function: castObjectId],
                cast: [Function: cast],
                _defaultCaster: [Function (anonymous)],
                checkRequired: [Function (anonymous)]
              },
              required: [ true, 'Please provide and ID...' ],
              unique: [ true, 'Please provide a unique ID...' ]
            },
            savedGuestName: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's name..." ],
              unique: false
            },
            savedGuestNumber: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's number..." ],
              unique: [ true, 'This number is already saved...' ]
            }
          },
          paths: {
            savedGuestId: ObjectId {
              path: 'savedGuestId',
              instance: 'ObjectId',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: 'Please provide and ID...',
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'savedGuestId' ],
              options: SchemaObjectIdOptions {
                type: [Function: ObjectId] {
                  schemaName: 'ObjectId',
                  defaultOptions: {},
                  get: [Function (anonymous)],
                  set: [Function: set],
                  setters: [],
                  _checkRequired: [Function (anonymous)],
                  _cast: [Function: castObjectId],
                  cast: [Function: cast],
                  _defaultCaster: [Function (anonymous)],
                  checkRequired: [Function (anonymous)]
                },
                required: [ true, 'Please provide and ID...' ],
                unique: [ true, 'Please provide a unique ID...' ]
              },
              _index: { unique: true },
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            savedGuestName: SchemaString {
              enumValues: [],
              regExp: null,
              path: 'savedGuestName',
              instance: 'String',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: "Please provide the saved guest's name...",
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'savedGuestName' ],
              options: SchemaStringOptions {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's name..." ],
                unique: false
              },
              _index: null,
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            savedGuestNumber: SchemaString {
              enumValues: [],
              regExp: null,
              path: 'savedGuestNumber',
              instance: 'String',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: "Please provide the saved guest's number...",
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'savedGuestNumber' ],
              options: SchemaStringOptions {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's number..." ],
                unique: [ true, 'This number is already saved...' ]
              },
              _index: { unique: true },
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            _id: ObjectId {
              path: '_id',
              instance: 'ObjectId',
              validators: [],
              getters: [],
              setters: [ [Function: resetId] ],
              _presplitPath: [ '_id' ],
              options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
              _index: null,
              defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
              [Symbol(mongoose#schemaType)]: true
            }
          },
          aliases: {},
          subpaths: {},
          virtuals: {},
          singleNestedPaths: {},
          nested: {},
          inherits: {},
          callQueue: [],
          _indexes: [],
          methods: {},
          methodOptions: {},
          statics: {},
          tree: {
            savedGuestId: {
              type: [Function: ObjectId] {
                schemaName: 'ObjectId',
                defaultOptions: {},
                get: [Function (anonymous)],
                set: [Function: set],
                setters: [],
                _checkRequired: [Function (anonymous)],
                _cast: [Function: castObjectId],
                cast: [Function: cast],
                _defaultCaster: [Function (anonymous)],
                checkRequired: [Function (anonymous)]
              },
              required: [ true, 'Please provide and ID...' ],
              unique: [ true, 'Please provide a unique ID...' ]
            },
            savedGuestName: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's name..." ],
              unique: false
            },
            savedGuestNumber: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's number..." ],
              unique: [ true, 'This number is already saved...' ]
            },
            _id: { auto: true, type: 'ObjectId' }
          },
          query: {},
          childSchemas: [],
          plugins: [],
          '$id': 3,
          mapPaths: [],
          s: { hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} } },
          _userProvidedOptions: {},
          options: {
            typeKey: 'type',
            id: true,
            _id: true,
            validateModifiedOnly: false,
            validateBeforeSave: true,
            read: null,
            shardKey: null,
            discriminatorKey: '__t',
            autoIndex: null,
            minimize: true,
            optimisticConcurrency: false,
            versionKey: '__v',
            capped: false,
            bufferCommands: true,
            strictQuery: false,
            strict: true
          }
        }
      ],
      type: [Function: Array],
      required: false,
      unique: false
    }
  },
  paths: {
    residentFirstName: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'residentFirstName',
      instance: 'String',
      validators: [
        {
          validator: [Function (anonymous)],
          message: "Please provide the resident's first name...",
          type: 'required'
        }
      ],
      getters: [],
      setters: [],
      _presplitPath: [ 'residentFirstName' ],
      options: SchemaStringOptions {
        type: [Function: String],
        required: [ true, "Please provide the resident's first name..." ],
        unique: false
      },
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    residentLastName: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'residentLastName',
      instance: 'String',
      validators: [
        {
          validator: [Function (anonymous)],
          message: "Please provide the resident's last name...",
          type: 'required'
        }
      ],
      getters: [],
      setters: [],
      _presplitPath: [ 'residentLastName' ],
      options: SchemaStringOptions {
        type: [Function: String],
        required: [ true, "Please provide the resident's last name..." ],
        unique: false
      },
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    residentEmail: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'residentEmail',
      instance: 'String',
      validators: [
        {
          validator: [Function (anonymous)],
          message: "Please provide the resident's email...",
          type: 'required'
        }
      ],
      getters: [],
      setters: [],
      _presplitPath: [ 'residentEmail' ],
      options: SchemaStringOptions {
        type: [Function: String],
        required: [ true, "Please provide the resident's email..." ],
        unique: [ true, 'Email exists...' ]
      },
      _index: { unique: true },
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    residentPassword: SchemaString {
      enumValues: [],
      regExp: null,
      path: 'residentPassword',
      instance: 'String',
      validators: [
        {
          validator: [Function (anonymous)],
          message: 'Please provide a password...',
          type: 'required'
        }
      ],
      getters: [],
      setters: [],
      _presplitPath: [ 'residentPassword' ],
      options: SchemaStringOptions {
        type: [Function: String],
        required: [ true, 'Please provide a password...' ],
        unique: false
      },
      _index: null,
      isRequired: true,
      requiredValidator: [Function (anonymous)],
      originalRequiredValue: true,
      [Symbol(mongoose#schemaType)]: true
    },
    invitedGuests: SchemaArray {
      schemaOptions: {
        typeKey: 'type',
        id: true,
        _id: true,
        validateModifiedOnly: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        discriminatorKey: '__t',
        autoIndex: null,
        minimize: true,
        optimisticConcurrency: false,
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strictQuery: false,
        strict: true,
        pluralization: true
      },
      casterConstructor: [Function: Mixed] {
        schemaName: 'Mixed',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        setters: []
      },
      caster: Mixed {
        path: 'invitedGuests',
        instance: 'Mixed',
        validators: [],
        getters: [],
        setters: [],
        _presplitPath: [ 'invitedGuests' ],
        options: SchemaTypeOptions {},
        _index: null,
        _arrayPath: 'invitedGuests.$',
        _arrayParentPath: 'invitedGuests',
        [Symbol(mongoose#schemaType)]: true,
        [Symbol(mongoose:schema_mixed)]: true
      },
      '$embeddedSchemaType': Mixed {
        path: 'invitedGuests',
        instance: 'Mixed',
        validators: [],
        getters: [],
        setters: [],
        _presplitPath: [ 'invitedGuests' ],
        options: SchemaTypeOptions {},
        _index: null,
        _arrayPath: 'invitedGuests.$',
        _arrayParentPath: 'invitedGuests',
        [Symbol(mongoose#schemaType)]: true,
        [Symbol(mongoose:schema_mixed)]: true
      },
      '$isMongooseArray': true,
      path: 'invitedGuests',
      instance: 'Array',
      validators: [],
      getters: [],
      setters: [],
      _presplitPath: [ 'invitedGuests' ],
      options: SchemaArrayOptions {
        invitedGuests: [
          Schema {
            obj: {
              invitedGuestDate: {
                type: [Function: Date],
                required: [ true, 'Please give date of visit...' ],
                unique: false
              },
              invitedGuestForDate: {
                invitedGuestForDate: [
                  Schema {
                    obj: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      }
                    },
                    paths: {
                      invitedGuestId: ObjectId {
                        path: 'invitedGuestId',
                        instance: 'ObjectId',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide and ID...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestId' ],
                        options: SchemaObjectIdOptions {
                          type: [Function: ObjectId] {
                            schemaName: 'ObjectId',
                            defaultOptions: {},
                            get: [Function (anonymous)],
                            set: [Function: set],
                            setters: [],
                            _checkRequired: [Function (anonymous)],
                            _cast: [Function: castObjectId],
                            cast: [Function: cast],
                            _defaultCaster: [Function (anonymous)],
                            checkRequired: [Function (anonymous)]
                          },
                          required: [ true, 'Please provide and ID...' ],
                          unique: [ true, 'Please provide a unique ID...' ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestName: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestName',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's name...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestName' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's name..."
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestNumber: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestNumber',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's phone number...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestNumber' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's phone number..."
                          ],
                          unique: [
                            true,
                            'Phone number has already been invited...'
                          ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassScanned: SchemaBoolean {
                        path: 'invitedGuestPassScanned',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been scanned...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassScanned' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been scanned...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassSent: SchemaBoolean {
                        path: 'invitedGuestPassSent',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been sent...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassSent' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been sent...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      _id: ObjectId {
                        path: '_id',
                        instance: 'ObjectId',
                        validators: [],
                        getters: [],
                        setters: [ [Function: resetId] ],
                        _presplitPath: [ '_id' ],
                        options: SchemaObjectIdOptions {
                          auto: true,
                          type: 'ObjectId'
                        },
                        _index: null,
                        defaultValue: [Function: defaultId] {
                          '$runBeforeSetters': true
                        },
                        [Symbol(mongoose#schemaType)]: true
                      }
                    },
                    aliases: {},
                    subpaths: {},
                    virtuals: {},
                    singleNestedPaths: {},
                    nested: {},
                    inherits: {},
                    callQueue: [],
                    _indexes: [],
                    methods: {},
                    methodOptions: {},
                    statics: {},
                    tree: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _id: { auto: true, type: 'ObjectId' }
                    },
                    query: {},
                    childSchemas: [],
                    plugins: [],
                    '$id': 1,
                    mapPaths: [],
                    s: {
                      hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                    },
                    _userProvidedOptions: {},
                    options: {
                      typeKey: 'type',
                      id: true,
                      _id: true,
                      validateModifiedOnly: false,
                      validateBeforeSave: true,
                      read: null,
                      shardKey: null,
                      discriminatorKey: '__t',
                      autoIndex: null,
                      minimize: true,
                      optimisticConcurrency: false,
                      versionKey: '__v',
                      capped: false,
                      bufferCommands: true,
                      strictQuery: false,
                      strict: true
                    }
                  }
                ],
                type: [Function: Array],
                required: [ true, 'Please give list of invited guests...' ],
                unique: false
              }
            },
            paths: {
              invitedGuestDate: SchemaDate {
                path: 'invitedGuestDate',
                instance: 'Date',
                validators: [
                  {
                    validator: [Function (anonymous)],
                    message: 'Please give date of visit...',
                    type: 'required'
                  }
                ],
                getters: [],
                setters: [],
                _presplitPath: [ 'invitedGuestDate' ],
                options: SchemaDateOptions {
                  type: [Function: Date],
                  required: [ true, 'Please give date of visit...' ],
                  unique: false
                },
                _index: null,
                isRequired: true,
                requiredValidator: [Function (anonymous)],
                originalRequiredValue: true,
                [Symbol(mongoose#schemaType)]: true
              },
              invitedGuestForDate: SchemaArray {
                schemaOptions: {
                  typeKey: 'type',
                  id: true,
                  _id: true,
                  validateModifiedOnly: false,
                  validateBeforeSave: true,
                  read: null,
                  shardKey: null,
                  discriminatorKey: '__t',
                  autoIndex: null,
                  minimize: true,
                  optimisticConcurrency: false,
                  versionKey: '__v',
                  capped: false,
                  bufferCommands: true,
                  strictQuery: false,
                  strict: true
                },
                casterConstructor: [Function: Mixed] {
                  schemaName: 'Mixed',
                  defaultOptions: {},
                  get: [Function (anonymous)],
                  set: [Function: set],
                  setters: []
                },
                caster: Mixed {
                  path: 'invitedGuestForDate',
                  instance: 'Mixed',
                  validators: [],
                  getters: [],
                  setters: [],
                  _presplitPath: [ 'invitedGuestForDate' ],
                  options: SchemaTypeOptions {},
                  _index: null,
                  _arrayPath: 'invitedGuestForDate.$',
                  _arrayParentPath: 'invitedGuestForDate',
                  [Symbol(mongoose#schemaType)]: true,
                  [Symbol(mongoose:schema_mixed)]: true
                },
                '$embeddedSchemaType': Mixed {
                  path: 'invitedGuestForDate',
                  instance: 'Mixed',
                  validators: [],
                  getters: [],
                  setters: [],
                  _presplitPath: [ 'invitedGuestForDate' ],
                  options: SchemaTypeOptions {},
                  _index: null,
                  _arrayPath: 'invitedGuestForDate.$',
                  _arrayParentPath: 'invitedGuestForDate',
                  [Symbol(mongoose#schemaType)]: true,
                  [Symbol(mongoose:schema_mixed)]: true
                },
                '$isMongooseArray': true,
                path: 'invitedGuestForDate',
                instance: 'Array',
                validators: [
                  {
                    validator: [Function (anonymous)],
                    message: 'Please give list of invited guests...',
                    type: 'required'
                  }
                ],
                getters: [],
                setters: [],
                _presplitPath: [ 'invitedGuestForDate' ],
                options: SchemaArrayOptions {
                  invitedGuestForDate: [
                    Schema {
                      obj: {
                        invitedGuestId: {
                          type: [Function: ObjectId] {
                            schemaName: 'ObjectId',
                            defaultOptions: {},
                            get: [Function (anonymous)],
                            set: [Function: set],
                            setters: [],
                            _checkRequired: [Function (anonymous)],
                            _cast: [Function: castObjectId],
                            cast: [Function: cast],
                            _defaultCaster: [Function (anonymous)],
                            checkRequired: [Function (anonymous)]
                          },
                          required: [ true, 'Please provide and ID...' ],
                          unique: [ true, 'Please provide a unique ID...' ]
                        },
                        invitedGuestName: {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's name..."
                          ],
                          unique: false
                        },
                        invitedGuestNumber: {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's phone number..."
                          ],
                          unique: [
                            true,
                            'Phone number has already been invited...'
                          ]
                        },
                        invitedGuestPassScanned: {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been scanned...'
                          ],
                          unique: false
                        },
                        invitedGuestPassSent: {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been sent...'
                          ],
                          unique: false
                        }
                      },
                      paths: {
                        invitedGuestId: ObjectId {
                          path: 'invitedGuestId',
                          instance: 'ObjectId',
                          validators: [
                            {
                              validator: [Function (anonymous)],
                              message: 'Please provide and ID...',
                              type: 'required'
                            }
                          ],
                          getters: [],
                          setters: [],
                          _presplitPath: [ 'invitedGuestId' ],
                          options: SchemaObjectIdOptions {
                            type: [Function: ObjectId] {
                              schemaName: 'ObjectId',
                              defaultOptions: {},
                              get: [Function (anonymous)],
                              set: [Function: set],
                              setters: [],
                              _checkRequired: [Function (anonymous)],
                              _cast: [Function: castObjectId],
                              cast: [Function: cast],
                              _defaultCaster: [Function (anonymous)],
                              checkRequired: [Function (anonymous)]
                            },
                            required: [ true, 'Please provide and ID...' ],
                            unique: [ true, 'Please provide a unique ID...' ]
                          },
                          _index: { unique: true },
                          isRequired: true,
                          requiredValidator: [Function (anonymous)],
                          originalRequiredValue: true,
                          [Symbol(mongoose#schemaType)]: true
                        },
                        invitedGuestName: SchemaString {
                          enumValues: [],
                          regExp: null,
                          path: 'invitedGuestName',
                          instance: 'String',
                          validators: [
                            {
                              validator: [Function (anonymous)],
                              message: "Please provide the guest's name...",
                              type: 'required'
                            }
                          ],
                          getters: [],
                          setters: [],
                          _presplitPath: [ 'invitedGuestName' ],
                          options: SchemaStringOptions {
                            type: [Function: String],
                            required: [
                              true,
                              "Please provide the guest's name..."
                            ],
                            unique: false
                          },
                          _index: null,
                          isRequired: true,
                          requiredValidator: [Function (anonymous)],
                          originalRequiredValue: true,
                          [Symbol(mongoose#schemaType)]: true
                        },
                        invitedGuestNumber: SchemaString {
                          enumValues: [],
                          regExp: null,
                          path: 'invitedGuestNumber',
                          instance: 'String',
                          validators: [
                            {
                              validator: [Function (anonymous)],
                              message: "Please provide the guest's phone number...",
                              type: 'required'
                            }
                          ],
                          getters: [],
                          setters: [],
                          _presplitPath: [ 'invitedGuestNumber' ],
                          options: SchemaStringOptions {
                            type: [Function: String],
                            required: [
                              true,
                              "Please provide the guest's phone number..."
                            ],
                            unique: [
                              true,
                              'Phone number has already been invited...'
                            ]
                          },
                          _index: { unique: true },
                          isRequired: true,
                          requiredValidator: [Function (anonymous)],
                          originalRequiredValue: true,
                          [Symbol(mongoose#schemaType)]: true
                        },
                        invitedGuestPassScanned: SchemaBoolean {
                          path: 'invitedGuestPassScanned',
                          instance: 'Boolean',
                          validators: [
                            {
                              validator: [Function (anonymous)],
                              message: 'Please provide if the pass has been scanned...',
                              type: 'required'
                            }
                          ],
                          getters: [],
                          setters: [],
                          _presplitPath: [ 'invitedGuestPassScanned' ],
                          options: SchemaTypeOptions {
                            type: [Function: Boolean],
                            required: [
                              true,
                              'Please provide if the pass has been scanned...'
                            ],
                            unique: false
                          },
                          _index: null,
                          isRequired: true,
                          requiredValidator: [Function (anonymous)],
                          originalRequiredValue: true,
                          [Symbol(mongoose#schemaType)]: true
                        },
                        invitedGuestPassSent: SchemaBoolean {
                          path: 'invitedGuestPassSent',
                          instance: 'Boolean',
                          validators: [
                            {
                              validator: [Function (anonymous)],
                              message: 'Please provide if the pass has been sent...',
                              type: 'required'
                            }
                          ],
                          getters: [],
                          setters: [],
                          _presplitPath: [ 'invitedGuestPassSent' ],
                          options: SchemaTypeOptions {
                            type: [Function: Boolean],
                            required: [
                              true,
                              'Please provide if the pass has been sent...'
                            ],
                            unique: false
                          },
                          _index: null,
                          isRequired: true,
                          requiredValidator: [Function (anonymous)],
                          originalRequiredValue: true,
                          [Symbol(mongoose#schemaType)]: true
                        },
                        _id: ObjectId {
                          path: '_id',
                          instance: 'ObjectId',
                          validators: [],
                          getters: [],
                          setters: [ [Function: resetId] ],
                          _presplitPath: [ '_id' ],
                          options: SchemaObjectIdOptions {
                            auto: true,
                            type: 'ObjectId'
                          },
                          _index: null,
                          defaultValue: [Function: defaultId] {
                            '$runBeforeSetters': true
                          },
                          [Symbol(mongoose#schemaType)]: true
                        }
                      },
                      aliases: {},
                      subpaths: {},
                      virtuals: {},
                      singleNestedPaths: {},
                      nested: {},
                      inherits: {},
                      callQueue: [],
                      _indexes: [],
                      methods: {},
                      methodOptions: {},
                      statics: {},
                      tree: {
                        invitedGuestId: {
                          type: [Function: ObjectId] {
                            schemaName: 'ObjectId',
                            defaultOptions: {},
                            get: [Function (anonymous)],
                            set: [Function: set],
                            setters: [],
                            _checkRequired: [Function (anonymous)],
                            _cast: [Function: castObjectId],
                            cast: [Function: cast],
                            _defaultCaster: [Function (anonymous)],
                            checkRequired: [Function (anonymous)]
                          },
                          required: [ true, 'Please provide and ID...' ],
                          unique: [ true, 'Please provide a unique ID...' ]
                        },
                        invitedGuestName: {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's name..."
                          ],
                          unique: false
                        },
                        invitedGuestNumber: {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's phone number..."
                          ],
                          unique: [
                            true,
                            'Phone number has already been invited...'
                          ]
                        },
                        invitedGuestPassScanned: {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been scanned...'
                          ],
                          unique: false
                        },
                        invitedGuestPassSent: {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been sent...'
                          ],
                          unique: false
                        },
                        _id: { auto: true, type: 'ObjectId' }
                      },
                      query: {},
                      childSchemas: [],
                      plugins: [],
                      '$id': 1,
                      mapPaths: [],
                      s: {
                        hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                      },
                      _userProvidedOptions: {},
                      options: {
                        typeKey: 'type',
                        id: true,
                        _id: true,
                        validateModifiedOnly: false,
                        validateBeforeSave: true,
                        read: null,
                        shardKey: null,
                        discriminatorKey: '__t',
                        autoIndex: null,
                        minimize: true,
                        optimisticConcurrency: false,
                        versionKey: '__v',
                        capped: false,
                        bufferCommands: true,
                        strictQuery: false,
                        strict: true
                      }
                    }
                  ],
                  type: [Function: Array],
                  required: [ true, 'Please give list of invited guests...' ],
                  unique: false
                },
                _index: null,
                isRequired: true,
                requiredValidator: [Function (anonymous)],
                originalRequiredValue: true,
                defaultValue: [Function: defaultFn] { '$runBeforeSetters': true },
                [Symbol(mongoose#schemaType)]: true
              },
              _id: ObjectId {
                path: '_id',
                instance: 'ObjectId',
                validators: [],
                getters: [],
                setters: [ [Function: resetId] ],
                _presplitPath: [ '_id' ],
                options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
                _index: null,
                defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
                [Symbol(mongoose#schemaType)]: true
              }
            },
            aliases: {},
            subpaths: {
              'invitedGuestForDate.$': Mixed {
                path: 'invitedGuestForDate.$',
                instance: 'Mixed',
                validators: [],
                getters: [],
                setters: [],
                _presplitPath: [ 'invitedGuestForDate' ],
                options: SchemaTypeOptions {},
                _index: null,
                [Symbol(mongoose#schemaType)]: true,
                [Symbol(mongoose:schema_mixed)]: true
              }
            },
            virtuals: {},
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: {
              invitedGuestDate: {
                type: [Function: Date],
                required: [ true, 'Please give date of visit...' ],
                unique: false
              },
              invitedGuestForDate: {
                invitedGuestForDate: [
                  Schema {
                    obj: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      }
                    },
                    paths: {
                      invitedGuestId: ObjectId {
                        path: 'invitedGuestId',
                        instance: 'ObjectId',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide and ID...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestId' ],
                        options: SchemaObjectIdOptions {
                          type: [Function: ObjectId] {
                            schemaName: 'ObjectId',
                            defaultOptions: {},
                            get: [Function (anonymous)],
                            set: [Function: set],
                            setters: [],
                            _checkRequired: [Function (anonymous)],
                            _cast: [Function: castObjectId],
                            cast: [Function: cast],
                            _defaultCaster: [Function (anonymous)],
                            checkRequired: [Function (anonymous)]
                          },
                          required: [ true, 'Please provide and ID...' ],
                          unique: [ true, 'Please provide a unique ID...' ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestName: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestName',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's name...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestName' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's name..."
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestNumber: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestNumber',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's phone number...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestNumber' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's phone number..."
                          ],
                          unique: [
                            true,
                            'Phone number has already been invited...'
                          ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassScanned: SchemaBoolean {
                        path: 'invitedGuestPassScanned',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been scanned...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassScanned' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been scanned...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassSent: SchemaBoolean {
                        path: 'invitedGuestPassSent',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been sent...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassSent' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been sent...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      _id: ObjectId {
                        path: '_id',
                        instance: 'ObjectId',
                        validators: [],
                        getters: [],
                        setters: [ [Function: resetId] ],
                        _presplitPath: [ '_id' ],
                        options: SchemaObjectIdOptions {
                          auto: true,
                          type: 'ObjectId'
                        },
                        _index: null,
                        defaultValue: [Function: defaultId] {
                          '$runBeforeSetters': true
                        },
                        [Symbol(mongoose#schemaType)]: true
                      }
                    },
                    aliases: {},
                    subpaths: {},
                    virtuals: {},
                    singleNestedPaths: {},
                    nested: {},
                    inherits: {},
                    callQueue: [],
                    _indexes: [],
                    methods: {},
                    methodOptions: {},
                    statics: {},
                    tree: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _id: { auto: true, type: 'ObjectId' }
                    },
                    query: {},
                    childSchemas: [],
                    plugins: [],
                    '$id': 1,
                    mapPaths: [],
                    s: {
                      hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                    },
                    _userProvidedOptions: {},
                    options: {
                      typeKey: 'type',
                      id: true,
                      _id: true,
                      validateModifiedOnly: false,
                      validateBeforeSave: true,
                      read: null,
                      shardKey: null,
                      discriminatorKey: '__t',
                      autoIndex: null,
                      minimize: true,
                      optimisticConcurrency: false,
                      versionKey: '__v',
                      capped: false,
                      bufferCommands: true,
                      strictQuery: false,
                      strict: true
                    }
                  }
                ],
                type: [Function: Array],
                required: [ true, 'Please give list of invited guests...' ],
                unique: false
              },
              _id: { auto: true, type: 'ObjectId' }
            },
            query: {},
            childSchemas: [],
            plugins: [],
            '$id': 2,
            mapPaths: [],
            s: { hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} } },
            _userProvidedOptions: {},
            options: {
              typeKey: 'type',
              id: true,
              _id: true,
              validateModifiedOnly: false,
              validateBeforeSave: true,
              read: null,
              shardKey: null,
              discriminatorKey: '__t',
              autoIndex: null,
              minimize: true,
              optimisticConcurrency: false,
              versionKey: '__v',
              capped: false,
              bufferCommands: true,
              strictQuery: false,
              strict: true
            }
          }
        ],
        type: [Function: Array],
        required: false,
        unique: false
      },
      _index: null,
      isRequired: false,
      defaultValue: [Function: defaultFn] { '$runBeforeSetters': true },
      [Symbol(mongoose#schemaType)]: true
    },
    savedGuests: SchemaArray {
      schemaOptions: {
        typeKey: 'type',
        id: true,
        _id: true,
        validateModifiedOnly: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        discriminatorKey: '__t',
        autoIndex: null,
        minimize: true,
        optimisticConcurrency: false,
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strictQuery: false,
        strict: true,
        pluralization: true
      },
      casterConstructor: [Function: Mixed] {
        schemaName: 'Mixed',
        defaultOptions: {},
        get: [Function (anonymous)],
        set: [Function: set],
        setters: []
      },
      caster: Mixed {
        path: 'savedGuests',
        instance: 'Mixed',
        validators: [],
        getters: [],
        setters: [],
        _presplitPath: [ 'savedGuests' ],
        options: SchemaTypeOptions {},
        _index: null,
        _arrayPath: 'savedGuests.$',
        _arrayParentPath: 'savedGuests',
        [Symbol(mongoose#schemaType)]: true,
        [Symbol(mongoose:schema_mixed)]: true
      },
      '$embeddedSchemaType': Mixed {
        path: 'savedGuests',
        instance: 'Mixed',
        validators: [],
        getters: [],
        setters: [],
        _presplitPath: [ 'savedGuests' ],
        options: SchemaTypeOptions {},
        _index: null,
        _arrayPath: 'savedGuests.$',
        _arrayParentPath: 'savedGuests',
        [Symbol(mongoose#schemaType)]: true,
        [Symbol(mongoose:schema_mixed)]: true
      },
      '$isMongooseArray': true,
      path: 'savedGuests',
      instance: 'Array',
      validators: [],
      getters: [],
      setters: [],
      _presplitPath: [ 'savedGuests' ],
      options: SchemaArrayOptions {
        savedGuests: [
          Schema {
            obj: {
              savedGuestId: {
                type: [Function: ObjectId] {
                  schemaName: 'ObjectId',
                  defaultOptions: {},
                  get: [Function (anonymous)],
                  set: [Function: set],
                  setters: [],
                  _checkRequired: [Function (anonymous)],
                  _cast: [Function: castObjectId],
                  cast: [Function: cast],
                  _defaultCaster: [Function (anonymous)],
                  checkRequired: [Function (anonymous)]
                },
                required: [ true, 'Please provide and ID...' ],
                unique: [ true, 'Please provide a unique ID...' ]
              },
              savedGuestName: {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's name..." ],
                unique: false
              },
              savedGuestNumber: {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's number..." ],
                unique: [ true, 'This number is already saved...' ]
              }
            },
            paths: {
              savedGuestId: ObjectId {
                path: 'savedGuestId',
                instance: 'ObjectId',
                validators: [
                  {
                    validator: [Function (anonymous)],
                    message: 'Please provide and ID...',
                    type: 'required'
                  }
                ],
                getters: [],
                setters: [],
                _presplitPath: [ 'savedGuestId' ],
                options: SchemaObjectIdOptions {
                  type: [Function: ObjectId] {
                    schemaName: 'ObjectId',
                    defaultOptions: {},
                    get: [Function (anonymous)],
                    set: [Function: set],
                    setters: [],
                    _checkRequired: [Function (anonymous)],
                    _cast: [Function: castObjectId],
                    cast: [Function: cast],
                    _defaultCaster: [Function (anonymous)],
                    checkRequired: [Function (anonymous)]
                  },
                  required: [ true, 'Please provide and ID...' ],
                  unique: [ true, 'Please provide a unique ID...' ]
                },
                _index: { unique: true },
                isRequired: true,
                requiredValidator: [Function (anonymous)],
                originalRequiredValue: true,
                [Symbol(mongoose#schemaType)]: true
              },
              savedGuestName: SchemaString {
                enumValues: [],
                regExp: null,
                path: 'savedGuestName',
                instance: 'String',
                validators: [
                  {
                    validator: [Function (anonymous)],
                    message: "Please provide the saved guest's name...",
                    type: 'required'
                  }
                ],
                getters: [],
                setters: [],
                _presplitPath: [ 'savedGuestName' ],
                options: SchemaStringOptions {
                  type: [Function: String],
                  required: [ true, "Please provide the saved guest's name..." ],
                  unique: false
                },
                _index: null,
                isRequired: true,
                requiredValidator: [Function (anonymous)],
                originalRequiredValue: true,
                [Symbol(mongoose#schemaType)]: true
              },
              savedGuestNumber: SchemaString {
                enumValues: [],
                regExp: null,
                path: 'savedGuestNumber',
                instance: 'String',
                validators: [
                  {
                    validator: [Function (anonymous)],
                    message: "Please provide the saved guest's number...",
                    type: 'required'
                  }
                ],
                getters: [],
                setters: [],
                _presplitPath: [ 'savedGuestNumber' ],
                options: SchemaStringOptions {
                  type: [Function: String],
                  required: [
                    true,
                    "Please provide the saved guest's number..."
                  ],
                  unique: [ true, 'This number is already saved...' ]
                },
                _index: { unique: true },
                isRequired: true,
                requiredValidator: [Function (anonymous)],
                originalRequiredValue: true,
                [Symbol(mongoose#schemaType)]: true
              },
              _id: ObjectId {
                path: '_id',
                instance: 'ObjectId',
                validators: [],
                getters: [],
                setters: [ [Function: resetId] ],
                _presplitPath: [ '_id' ],
                options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
                _index: null,
                defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
                [Symbol(mongoose#schemaType)]: true
              }
            },
            aliases: {},
            subpaths: {},
            virtuals: {},
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [],
            methods: {},
            methodOptions: {},
            statics: {},
            tree: {
              savedGuestId: {
                type: [Function: ObjectId] {
                  schemaName: 'ObjectId',
                  defaultOptions: {},
                  get: [Function (anonymous)],
                  set: [Function: set],
                  setters: [],
                  _checkRequired: [Function (anonymous)],
                  _cast: [Function: castObjectId],
                  cast: [Function: cast],
                  _defaultCaster: [Function (anonymous)],
                  checkRequired: [Function (anonymous)]
                },
                required: [ true, 'Please provide and ID...' ],
                unique: [ true, 'Please provide a unique ID...' ]
              },
              savedGuestName: {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's name..." ],
                unique: false
              },
              savedGuestNumber: {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's number..." ],
                unique: [ true, 'This number is already saved...' ]
              },
              _id: { auto: true, type: 'ObjectId' }
            },
            query: {},
            childSchemas: [],
            plugins: [],
            '$id': 3,
            mapPaths: [],
            s: { hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} } },
            _userProvidedOptions: {},
            options: {
              typeKey: 'type',
              id: true,
              _id: true,
              validateModifiedOnly: false,
              validateBeforeSave: true,
              read: null,
              shardKey: null,
              discriminatorKey: '__t',
              autoIndex: null,
              minimize: true,
              optimisticConcurrency: false,
              versionKey: '__v',
              capped: false,
              bufferCommands: true,
              strictQuery: false,
              strict: true
            }
          }
        ],
        type: [Function: Array],
        required: false,
        unique: false
      },
      _index: null,
      isRequired: false,
      defaultValue: [Function: defaultFn] { '$runBeforeSetters': true },
      [Symbol(mongoose#schemaType)]: true
    },
    _id: ObjectId {
      path: '_id',
      instance: 'ObjectId',
      validators: [],
      getters: [],
      setters: [ [Function: resetId] ],
      _presplitPath: [ '_id' ],
      options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
      _index: null,
      defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
      [Symbol(mongoose#schemaType)]: true
    },
    __v: SchemaNumber {
      path: '__v',
      instance: 'Number',
      validators: [],
      getters: [],
      setters: [],
      _presplitPath: [ '__v' ],
      options: SchemaNumberOptions { type: [Function: Number] },
      _index: null,
      [Symbol(mongoose#schemaType)]: true
    }
  },
  aliases: {},
  subpaths: {
    'invitedGuests.$': Mixed {
      path: 'invitedGuests.$',
      instance: 'Mixed',
      validators: [],
      getters: [],
      setters: [],
      _presplitPath: [ 'invitedGuests' ],
      options: SchemaTypeOptions {},
      _index: null,
      [Symbol(mongoose#schemaType)]: true,
      [Symbol(mongoose:schema_mixed)]: true
    },
    'savedGuests.$': Mixed {
      path: 'savedGuests.$',
      instance: 'Mixed',
      validators: [],
      getters: [],
      setters: [],
      _presplitPath: [ 'savedGuests' ],
      options: SchemaTypeOptions {},
      _index: null,
      [Symbol(mongoose#schemaType)]: true,
      [Symbol(mongoose:schema_mixed)]: true
    }
  },
  virtuals: {
    id: VirtualType {
      path: 'id',
      getters: [ [Function: idGetter] ],
      setters: [ [Function: idSetter] ],
      options: {}
    }
  },
  singleNestedPaths: {},
  nested: {},
  inherits: {},
  callQueue: [],
  _indexes: [],
  methods: {},
  methodOptions: {},
  statics: {},
  tree: {
    residentFirstName: {
      type: [Function: String],
      required: [ true, "Please provide the resident's first name..." ],
      unique: false
    },
    residentLastName: {
      type: [Function: String],
      required: [ true, "Please provide the resident's last name..." ],
      unique: false
    },
    residentEmail: {
      type: [Function: String],
      required: [ true, "Please provide the resident's email..." ],
      unique: [ true, 'Email exists...' ]
    },
    residentPassword: {
      type: [Function: String],
      required: [ true, 'Please provide a password...' ],
      unique: false
    },
    invitedGuests: {
      invitedGuests: [
        Schema {
          obj: {
            invitedGuestDate: {
              type: [Function: Date],
              required: [ true, 'Please give date of visit...' ],
              unique: false
            },
            invitedGuestForDate: {
              invitedGuestForDate: [
                Schema {
                  obj: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    }
                  },
                  paths: {
                    invitedGuestId: ObjectId {
                      path: 'invitedGuestId',
                      instance: 'ObjectId',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide and ID...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestId' ],
                      options: SchemaObjectIdOptions {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestName: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestName',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's name...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestName' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestNumber: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestNumber',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's phone number...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestNumber' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassScanned: SchemaBoolean {
                      path: 'invitedGuestPassScanned',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been scanned...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassScanned' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassSent: SchemaBoolean {
                      path: 'invitedGuestPassSent',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been sent...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassSent' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    _id: ObjectId {
                      path: '_id',
                      instance: 'ObjectId',
                      validators: [],
                      getters: [],
                      setters: [ [Function: resetId] ],
                      _presplitPath: [ '_id' ],
                      options: SchemaObjectIdOptions {
                        auto: true,
                        type: 'ObjectId'
                      },
                      _index: null,
                      defaultValue: [Function: defaultId] {
                        '$runBeforeSetters': true
                      },
                      [Symbol(mongoose#schemaType)]: true
                    }
                  },
                  aliases: {},
                  subpaths: {},
                  virtuals: {},
                  singleNestedPaths: {},
                  nested: {},
                  inherits: {},
                  callQueue: [],
                  _indexes: [],
                  methods: {},
                  methodOptions: {},
                  statics: {},
                  tree: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    },
                    _id: { auto: true, type: 'ObjectId' }
                  },
                  query: {},
                  childSchemas: [],
                  plugins: [],
                  '$id': 1,
                  mapPaths: [],
                  s: {
                    hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                  },
                  _userProvidedOptions: {},
                  options: {
                    typeKey: 'type',
                    id: true,
                    _id: true,
                    validateModifiedOnly: false,
                    validateBeforeSave: true,
                    read: null,
                    shardKey: null,
                    discriminatorKey: '__t',
                    autoIndex: null,
                    minimize: true,
                    optimisticConcurrency: false,
                    versionKey: '__v',
                    capped: false,
                    bufferCommands: true,
                    strictQuery: false,
                    strict: true
                  }
                }
              ],
              type: [Function: Array],
              required: [ true, 'Please give list of invited guests...' ],
              unique: false
            }
          },
          paths: {
            invitedGuestDate: SchemaDate {
              path: 'invitedGuestDate',
              instance: 'Date',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: 'Please give date of visit...',
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'invitedGuestDate' ],
              options: SchemaDateOptions {
                type: [Function: Date],
                required: [ true, 'Please give date of visit...' ],
                unique: false
              },
              _index: null,
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            invitedGuestForDate: SchemaArray {
              schemaOptions: {
                typeKey: 'type',
                id: true,
                _id: true,
                validateModifiedOnly: false,
                validateBeforeSave: true,
                read: null,
                shardKey: null,
                discriminatorKey: '__t',
                autoIndex: null,
                minimize: true,
                optimisticConcurrency: false,
                versionKey: '__v',
                capped: false,
                bufferCommands: true,
                strictQuery: false,
                strict: true
              },
              casterConstructor: [Function: Mixed] {
                schemaName: 'Mixed',
                defaultOptions: {},
                get: [Function (anonymous)],
                set: [Function: set],
                setters: []
              },
              caster: Mixed {
                path: 'invitedGuestForDate',
                instance: 'Mixed',
                validators: [],
                getters: [],
                setters: [],
                _presplitPath: [ 'invitedGuestForDate' ],
                options: SchemaTypeOptions {},
                _index: null,
                _arrayPath: 'invitedGuestForDate.$',
                _arrayParentPath: 'invitedGuestForDate',
                [Symbol(mongoose#schemaType)]: true,
                [Symbol(mongoose:schema_mixed)]: true
              },
              '$embeddedSchemaType': Mixed {
                path: 'invitedGuestForDate',
                instance: 'Mixed',
                validators: [],
                getters: [],
                setters: [],
                _presplitPath: [ 'invitedGuestForDate' ],
                options: SchemaTypeOptions {},
                _index: null,
                _arrayPath: 'invitedGuestForDate.$',
                _arrayParentPath: 'invitedGuestForDate',
                [Symbol(mongoose#schemaType)]: true,
                [Symbol(mongoose:schema_mixed)]: true
              },
              '$isMongooseArray': true,
              path: 'invitedGuestForDate',
              instance: 'Array',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: 'Please give list of invited guests...',
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'invitedGuestForDate' ],
              options: SchemaArrayOptions {
                invitedGuestForDate: [
                  Schema {
                    obj: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      }
                    },
                    paths: {
                      invitedGuestId: ObjectId {
                        path: 'invitedGuestId',
                        instance: 'ObjectId',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide and ID...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestId' ],
                        options: SchemaObjectIdOptions {
                          type: [Function: ObjectId] {
                            schemaName: 'ObjectId',
                            defaultOptions: {},
                            get: [Function (anonymous)],
                            set: [Function: set],
                            setters: [],
                            _checkRequired: [Function (anonymous)],
                            _cast: [Function: castObjectId],
                            cast: [Function: cast],
                            _defaultCaster: [Function (anonymous)],
                            checkRequired: [Function (anonymous)]
                          },
                          required: [ true, 'Please provide and ID...' ],
                          unique: [ true, 'Please provide a unique ID...' ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestName: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestName',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's name...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestName' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's name..."
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestNumber: SchemaString {
                        enumValues: [],
                        regExp: null,
                        path: 'invitedGuestNumber',
                        instance: 'String',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: "Please provide the guest's phone number...",
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestNumber' ],
                        options: SchemaStringOptions {
                          type: [Function: String],
                          required: [
                            true,
                            "Please provide the guest's phone number..."
                          ],
                          unique: [
                            true,
                            'Phone number has already been invited...'
                          ]
                        },
                        _index: { unique: true },
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassScanned: SchemaBoolean {
                        path: 'invitedGuestPassScanned',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been scanned...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassScanned' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been scanned...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      invitedGuestPassSent: SchemaBoolean {
                        path: 'invitedGuestPassSent',
                        instance: 'Boolean',
                        validators: [
                          {
                            validator: [Function (anonymous)],
                            message: 'Please provide if the pass has been sent...',
                            type: 'required'
                          }
                        ],
                        getters: [],
                        setters: [],
                        _presplitPath: [ 'invitedGuestPassSent' ],
                        options: SchemaTypeOptions {
                          type: [Function: Boolean],
                          required: [
                            true,
                            'Please provide if the pass has been sent...'
                          ],
                          unique: false
                        },
                        _index: null,
                        isRequired: true,
                        requiredValidator: [Function (anonymous)],
                        originalRequiredValue: true,
                        [Symbol(mongoose#schemaType)]: true
                      },
                      _id: ObjectId {
                        path: '_id',
                        instance: 'ObjectId',
                        validators: [],
                        getters: [],
                        setters: [ [Function: resetId] ],
                        _presplitPath: [ '_id' ],
                        options: SchemaObjectIdOptions {
                          auto: true,
                          type: 'ObjectId'
                        },
                        _index: null,
                        defaultValue: [Function: defaultId] {
                          '$runBeforeSetters': true
                        },
                        [Symbol(mongoose#schemaType)]: true
                      }
                    },
                    aliases: {},
                    subpaths: {},
                    virtuals: {},
                    singleNestedPaths: {},
                    nested: {},
                    inherits: {},
                    callQueue: [],
                    _indexes: [],
                    methods: {},
                    methodOptions: {},
                    statics: {},
                    tree: {
                      invitedGuestId: {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      invitedGuestName: {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      invitedGuestNumber: {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      invitedGuestPassScanned: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      invitedGuestPassSent: {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _id: { auto: true, type: 'ObjectId' }
                    },
                    query: {},
                    childSchemas: [],
                    plugins: [],
                    '$id': 1,
                    mapPaths: [],
                    s: {
                      hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                    },
                    _userProvidedOptions: {},
                    options: {
                      typeKey: 'type',
                      id: true,
                      _id: true,
                      validateModifiedOnly: false,
                      validateBeforeSave: true,
                      read: null,
                      shardKey: null,
                      discriminatorKey: '__t',
                      autoIndex: null,
                      minimize: true,
                      optimisticConcurrency: false,
                      versionKey: '__v',
                      capped: false,
                      bufferCommands: true,
                      strictQuery: false,
                      strict: true
                    }
                  }
                ],
                type: [Function: Array],
                required: [ true, 'Please give list of invited guests...' ],
                unique: false
              },
              _index: null,
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              defaultValue: [Function: defaultFn] { '$runBeforeSetters': true },
              [Symbol(mongoose#schemaType)]: true
            },
            _id: ObjectId {
              path: '_id',
              instance: 'ObjectId',
              validators: [],
              getters: [],
              setters: [ [Function: resetId] ],
              _presplitPath: [ '_id' ],
              options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
              _index: null,
              defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
              [Symbol(mongoose#schemaType)]: true
            }
          },
          aliases: {},
          subpaths: {
            'invitedGuestForDate.$': Mixed {
              path: 'invitedGuestForDate.$',
              instance: 'Mixed',
              validators: [],
              getters: [],
              setters: [],
              _presplitPath: [ 'invitedGuestForDate' ],
              options: SchemaTypeOptions {},
              _index: null,
              [Symbol(mongoose#schemaType)]: true,
              [Symbol(mongoose:schema_mixed)]: true
            }
          },
          virtuals: {},
          singleNestedPaths: {},
          nested: {},
          inherits: {},
          callQueue: [],
          _indexes: [],
          methods: {},
          methodOptions: {},
          statics: {},
          tree: {
            invitedGuestDate: {
              type: [Function: Date],
              required: [ true, 'Please give date of visit...' ],
              unique: false
            },
            invitedGuestForDate: {
              invitedGuestForDate: [
                Schema {
                  obj: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    }
                  },
                  paths: {
                    invitedGuestId: ObjectId {
                      path: 'invitedGuestId',
                      instance: 'ObjectId',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide and ID...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestId' ],
                      options: SchemaObjectIdOptions {
                        type: [Function: ObjectId] {
                          schemaName: 'ObjectId',
                          defaultOptions: {},
                          get: [Function (anonymous)],
                          set: [Function: set],
                          setters: [],
                          _checkRequired: [Function (anonymous)],
                          _cast: [Function: castObjectId],
                          cast: [Function: cast],
                          _defaultCaster: [Function (anonymous)],
                          checkRequired: [Function (anonymous)]
                        },
                        required: [ true, 'Please provide and ID...' ],
                        unique: [ true, 'Please provide a unique ID...' ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestName: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestName',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's name...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestName' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [ true, "Please provide the guest's name..." ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestNumber: SchemaString {
                      enumValues: [],
                      regExp: null,
                      path: 'invitedGuestNumber',
                      instance: 'String',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: "Please provide the guest's phone number...",
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestNumber' ],
                      options: SchemaStringOptions {
                        type: [Function: String],
                        required: [
                          true,
                          "Please provide the guest's phone number..."
                        ],
                        unique: [
                          true,
                          'Phone number has already been invited...'
                        ]
                      },
                      _index: { unique: true },
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassScanned: SchemaBoolean {
                      path: 'invitedGuestPassScanned',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been scanned...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassScanned' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been scanned...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    invitedGuestPassSent: SchemaBoolean {
                      path: 'invitedGuestPassSent',
                      instance: 'Boolean',
                      validators: [
                        {
                          validator: [Function (anonymous)],
                          message: 'Please provide if the pass has been sent...',
                          type: 'required'
                        }
                      ],
                      getters: [],
                      setters: [],
                      _presplitPath: [ 'invitedGuestPassSent' ],
                      options: SchemaTypeOptions {
                        type: [Function: Boolean],
                        required: [
                          true,
                          'Please provide if the pass has been sent...'
                        ],
                        unique: false
                      },
                      _index: null,
                      isRequired: true,
                      requiredValidator: [Function (anonymous)],
                      originalRequiredValue: true,
                      [Symbol(mongoose#schemaType)]: true
                    },
                    _id: ObjectId {
                      path: '_id',
                      instance: 'ObjectId',
                      validators: [],
                      getters: [],
                      setters: [ [Function: resetId] ],
                      _presplitPath: [ '_id' ],
                      options: SchemaObjectIdOptions {
                        auto: true,
                        type: 'ObjectId'
                      },
                      _index: null,
                      defaultValue: [Function: defaultId] {
                        '$runBeforeSetters': true
                      },
                      [Symbol(mongoose#schemaType)]: true
                    }
                  },
                  aliases: {},
                  subpaths: {},
                  virtuals: {},
                  singleNestedPaths: {},
                  nested: {},
                  inherits: {},
                  callQueue: [],
                  _indexes: [],
                  methods: {},
                  methodOptions: {},
                  statics: {},
                  tree: {
                    invitedGuestId: {
                      type: [Function: ObjectId] {
                        schemaName: 'ObjectId',
                        defaultOptions: {},
                        get: [Function (anonymous)],
                        set: [Function: set],
                        setters: [],
                        _checkRequired: [Function (anonymous)],
                        _cast: [Function: castObjectId],
                        cast: [Function: cast],
                        _defaultCaster: [Function (anonymous)],
                        checkRequired: [Function (anonymous)]
                      },
                      required: [ true, 'Please provide and ID...' ],
                      unique: [ true, 'Please provide a unique ID...' ]
                    },
                    invitedGuestName: {
                      type: [Function: String],
                      required: [ true, "Please provide the guest's name..." ],
                      unique: false
                    },
                    invitedGuestNumber: {
                      type: [Function: String],
                      required: [
                        true,
                        "Please provide the guest's phone number..."
                      ],
                      unique: [
                        true,
                        'Phone number has already been invited...'
                      ]
                    },
                    invitedGuestPassScanned: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been scanned...'
                      ],
                      unique: false
                    },
                    invitedGuestPassSent: {
                      type: [Function: Boolean],
                      required: [
                        true,
                        'Please provide if the pass has been sent...'
                      ],
                      unique: false
                    },
                    _id: { auto: true, type: 'ObjectId' }
                  },
                  query: {},
                  childSchemas: [],
                  plugins: [],
                  '$id': 1,
                  mapPaths: [],
                  s: {
                    hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} }
                  },
                  _userProvidedOptions: {},
                  options: {
                    typeKey: 'type',
                    id: true,
                    _id: true,
                    validateModifiedOnly: false,
                    validateBeforeSave: true,
                    read: null,
                    shardKey: null,
                    discriminatorKey: '__t',
                    autoIndex: null,
                    minimize: true,
                    optimisticConcurrency: false,
                    versionKey: '__v',
                    capped: false,
                    bufferCommands: true,
                    strictQuery: false,
                    strict: true
                  }
                }
              ],
              type: [Function: Array],
              required: [ true, 'Please give list of invited guests...' ],
              unique: false
            },
            _id: { auto: true, type: 'ObjectId' }
          },
          query: {},
          childSchemas: [],
          plugins: [],
          '$id': 2,
          mapPaths: [],
          s: { hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} } },
          _userProvidedOptions: {},
          options: {
            typeKey: 'type',
            id: true,
            _id: true,
            validateModifiedOnly: false,
            validateBeforeSave: true,
            read: null,
            shardKey: null,
            discriminatorKey: '__t',
            autoIndex: null,
            minimize: true,
            optimisticConcurrency: false,
            versionKey: '__v',
            capped: false,
            bufferCommands: true,
            strictQuery: false,
            strict: true
          }
        }
      ],
      type: [Function: Array],
      required: false,
      unique: false
    },
    savedGuests: {
      savedGuests: [
        Schema {
          obj: {
            savedGuestId: {
              type: [Function: ObjectId] {
                schemaName: 'ObjectId',
                defaultOptions: {},
                get: [Function (anonymous)],
                set: [Function: set],
                setters: [],
                _checkRequired: [Function (anonymous)],
                _cast: [Function: castObjectId],
                cast: [Function: cast],
                _defaultCaster: [Function (anonymous)],
                checkRequired: [Function (anonymous)]
              },
              required: [ true, 'Please provide and ID...' ],
              unique: [ true, 'Please provide a unique ID...' ]
            },
            savedGuestName: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's name..." ],
              unique: false
            },
            savedGuestNumber: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's number..." ],
              unique: [ true, 'This number is already saved...' ]
            }
          },
          paths: {
            savedGuestId: ObjectId {
              path: 'savedGuestId',
              instance: 'ObjectId',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: 'Please provide and ID...',
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'savedGuestId' ],
              options: SchemaObjectIdOptions {
                type: [Function: ObjectId] {
                  schemaName: 'ObjectId',
                  defaultOptions: {},
                  get: [Function (anonymous)],
                  set: [Function: set],
                  setters: [],
                  _checkRequired: [Function (anonymous)],
                  _cast: [Function: castObjectId],
                  cast: [Function: cast],
                  _defaultCaster: [Function (anonymous)],
                  checkRequired: [Function (anonymous)]
                },
                required: [ true, 'Please provide and ID...' ],
                unique: [ true, 'Please provide a unique ID...' ]
              },
              _index: { unique: true },
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            savedGuestName: SchemaString {
              enumValues: [],
              regExp: null,
              path: 'savedGuestName',
              instance: 'String',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: "Please provide the saved guest's name...",
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'savedGuestName' ],
              options: SchemaStringOptions {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's name..." ],
                unique: false
              },
              _index: null,
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            savedGuestNumber: SchemaString {
              enumValues: [],
              regExp: null,
              path: 'savedGuestNumber',
              instance: 'String',
              validators: [
                {
                  validator: [Function (anonymous)],
                  message: "Please provide the saved guest's number...",
                  type: 'required'
                }
              ],
              getters: [],
              setters: [],
              _presplitPath: [ 'savedGuestNumber' ],
              options: SchemaStringOptions {
                type: [Function: String],
                required: [ true, "Please provide the saved guest's number..." ],
                unique: [ true, 'This number is already saved...' ]
              },
              _index: { unique: true },
              isRequired: true,
              requiredValidator: [Function (anonymous)],
              originalRequiredValue: true,
              [Symbol(mongoose#schemaType)]: true
            },
            _id: ObjectId {
              path: '_id',
              instance: 'ObjectId',
              validators: [],
              getters: [],
              setters: [ [Function: resetId] ],
              _presplitPath: [ '_id' ],
              options: SchemaObjectIdOptions { auto: true, type: 'ObjectId' },
              _index: null,
              defaultValue: [Function: defaultId] { '$runBeforeSetters': true },
              [Symbol(mongoose#schemaType)]: true
            }
          },
          aliases: {},
          subpaths: {},
          virtuals: {},
          singleNestedPaths: {},
          nested: {},
          inherits: {},
          callQueue: [],
          _indexes: [],
          methods: {},
          methodOptions: {},
          statics: {},
          tree: {
            savedGuestId: {
              type: [Function: ObjectId] {
                schemaName: 'ObjectId',
                defaultOptions: {},
                get: [Function (anonymous)],
                set: [Function: set],
                setters: [],
                _checkRequired: [Function (anonymous)],
                _cast: [Function: castObjectId],
                cast: [Function: cast],
                _defaultCaster: [Function (anonymous)],
                checkRequired: [Function (anonymous)]
              },
              required: [ true, 'Please provide and ID...' ],
              unique: [ true, 'Please provide a unique ID...' ]
            },
            savedGuestName: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's name..." ],
              unique: false
            },
            savedGuestNumber: {
              type: [Function: String],
              required: [ true, "Please provide the saved guest's number..." ],
              unique: [ true, 'This number is already saved...' ]
            },
            _id: { auto: true, type: 'ObjectId' }
          },
          query: {},
          childSchemas: [],
          plugins: [],
          '$id': 3,
          mapPaths: [],
          s: { hooks: Kareem { _pres: Map(0) {}, _posts: Map(0) {} } },
          _userProvidedOptions: {},
          options: {
            typeKey: 'type',
            id: true,
            _id: true,
            validateModifiedOnly: false,
            validateBeforeSave: true,
            read: null,
            shardKey: null,
            discriminatorKey: '__t',
            autoIndex: null,
            minimize: true,
            optimisticConcurrency: false,
            versionKey: '__v',
            capped: false,
            bufferCommands: true,
            strictQuery: false,
            strict: true
          }
        }
      ],
      type: [Function: Array],
      required: false,
      unique: false
    },
    _id: { auto: true, type: 'ObjectId' },
    __v: [Function: Number],
    id: VirtualType {
      path: 'id',
      getters: [ [Function: idGetter] ],
      setters: [ [Function: idSetter] ],
      options: {}
    }
  },
  query: {},
  childSchemas: [],
  plugins: [
    { fn: [Function: removeSubdocs], opts: { deduplicate: true } },
    { fn: [Function: saveSubdocs], opts: { deduplicate: true } },
    {
      fn: [Function: shardingPlugin] { storeShard: [Function: storeShard] },
      opts: { deduplicate: true }
    },
    { fn: [Function: trackTransaction], opts: { deduplicate: true } },
    { fn: [Function: validateBeforeSave], opts: { deduplicate: true } }
  ],
  '$id': 4,
  mapPaths: [],
  s: {
    hooks: Kareem {
      _pres: Map(3) {
        'deleteOne' => [
          {
            document: true,
            query: false,
            fn: [Function: removeSubDocsPreRemove],
            isAsync: undefined
          }
        ],
        'save' => [
          { fn: [Function: validateBeforeSave], isAsync: false },
          { fn: [Function: saveSubdocsPreSave], isAsync: false },
          { fn: [Function: shardingPluginPreSave], isAsync: false },
          { fn: [Function: trackTransactionPreSave], isAsync: false }
        ],
        'remove' => [ { fn: [Function: shardingPluginPreRemove], isAsync: false } ]
      },
      _posts: Map(2) {
        'save' => [
          { fn: [Function: saveSubdocsPostSave] },
          { fn: [Function: shardingPluginPostSave] }
        ],
        'init' => [ { fn: [Function: shardingPluginPostInit] } ]
      }
    }
  },
  _userProvidedOptions: {},
  options: {
    typeKey: 'type',
    id: true,
    _id: true,
    validateModifiedOnly: false,
    validateBeforeSave: true,
    read: null,
    shardKey: null,
    discriminatorKey: '__t',
    autoIndex: null,
    minimize: true,
    optimisticConcurrency: false,
    versionKey: '__v',
    capped: false,
    bufferCommands: true,
    strictQuery: false,
    strict: true,
    pluralization: true
  },
  '$globalPluginsApplied': true
}